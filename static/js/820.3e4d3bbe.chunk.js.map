{"version":3,"file":"static/js/820.3e4d3bbe.chunk.js","mappings":"yMAGaA,EAAYC,EAAAA,EAAAA,EAAH,2LAaTC,GAAYD,EAAAA,EAAAA,GAAOE,EAAAA,GAAPF,CAAH,kEAOTG,EAAUH,EAAAA,EAAAA,GAAH,kE,kBCnBPI,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGF,EAAOG,KAAI,SAAAC,GAAK,OACf,SAACN,EAAD,WACE,SAACF,EAAD,CAAWS,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAArD,UACE,SAACP,EAAD,UAAYU,EAAMK,WAFRL,EAAME,GADL,KAStB,C,qFC4DD,UAxEe,WAAO,IAAD,EACnB,GAA4BI,EAAAA,EAAAA,UAAS,IAArC,eAAOV,EAAP,KAAeW,EAAf,KACA,GAAwBD,EAAAA,EAAAA,UAAS,IAAjC,eAAOE,EAAP,KAAaC,EAAb,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAS,UAAGF,EAAaG,IAAI,eAApB,QAA+B,IAE5CC,EAAAA,EAAAA,IAAUF,GACDG,MAAK,SAAAC,GACFV,EAAUU,EAAKC,QAClB,IACAC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,EACf,IAuCX,OAfAG,EAAAA,EAAAA,YAAU,WACU,KAAdV,GACFD,EAAgB,CAAC,EAEpB,GAAE,CAACC,EAAWD,KAGfW,EAAAA,EAAAA,YAAU,WACJ3B,IAAW,KAGfmB,EAAAA,EAAAA,IAAUF,EAEX,GAAE,CAACjB,EAAQiB,KAGV,2BACE,4BACE,kBAAMW,SAxCO,SAAAC,GACjBA,EAAMC,iBACN,IAAMb,EAAYY,EAAME,OAAOnB,KAAKoB,MAEpC,GAAyB,KAArBf,EAAUgB,OAAd,CAKA,GAAkB,KAAdhB,EACF,OAAOD,EAAgB,CAAC,GAE1BA,EAAgB,CAAEJ,KAAMK,KAExBE,EAAAA,EAAAA,IAAUF,GACVJ,EAAQ,GARP,MAFCqB,MAAM,oBAWT,EAwBK,WACE,kBACEC,KAAK,OACLvB,KAAK,OACLwB,YAAY,oBACZJ,MAAOpB,EACPyB,SA5BW,SAAAR,GACnBhB,EAAQgB,EAAMS,cAAcN,MAC7B,KA4BO,mBAAQG,KAAK,SAAb,wBAGF,SAAC,IAAD,CAAYnC,OAAQA,QAI3B,C,uHC3EYuC,EAAW,gCACXC,EAAU,mCCGhB,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,sGAEGC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,sCAAmDC,EAAnD,OAFH,uBACCnB,EADD,EACCA,KADD,kBAIEA,GAJF,kEAQA,SAAeF,EAAtB,+CAAO,OAAP,oBAAO,WAAyBwB,GAAzB,yFAEGD,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iCAA8CC,EAA9C,yBAAsEG,EAAtE,OAFH,uBACGtB,EADH,EACGA,KADH,kBAIEA,GAJF,kE","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.js","pages/Movies/Movies.js","services/baseURL.js","services/getDATA.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const MovieName = styled.p`\n  padding: 2px;\n  margin-top: 4px;\n  margin-bottom: 0;\n  color: #38598b;\n  margin-bottom: 0;\n\n  &:hover {\n    color: #ff9a3c; \n    font-weight: 500;\n  }\n`;\n\nexport const MovieLink = styled(Link)`\n  \n&:hover {\ntext-decoration: none;\n}\n`;\n\nexport const MovieLi = styled.li`\n \n  &:hover {\n    color: #ff9a3c;\n  }\n`;","import { MovieName, MovieLi, MovieLink } from './MoviesList.styled';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul>\n      {movies.map(movie => (\n        <MovieLi key={movie.id}>\n          <MovieLink to={`/movies/${movie.id}`} state={{ from: location }}>\n            <MovieName>{movie.title}</MovieName>\n          </MovieLink>\n        </MovieLi>\n      ))}\n    </ul>\n  );\n};\n\n\nMoviesList.propTypes = {\n  movies: PropTypes.array\n}","import { useSearchParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { MoviesList } from '../../components/MoviesList/MoviesList';\nimport { getMovies } from '../../services/getDATA'; \n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [name, setName] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const movieName = searchParams.get('name') ?? '';\n\n    getMovies(movieName)\n            .then(data => {\n                setMovies(data.results);\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    \n  const formSubmit = event => {\n    event.preventDefault();\n    const movieName = event.target.name.value;\n\n    if (movieName.trim() === '') {\n      alert('Please enter name');\n      return;\n    }\n\n    if (movieName === '') {\n      return setSearchParams({});\n    }\n    setSearchParams({ name: movieName });\n\n    getMovies(movieName);\n    setName('');\n  };\n\n  const handleChange = event => {\n    setName(event.currentTarget.value);\n  };\n\n  useEffect(() => {\n    if (movieName === '') {\n      setSearchParams({});\n    }\n  }, [movieName, setSearchParams]);\n\n\n  useEffect(() => {\n    if (movies === []) {\n      return;\n    }\n    getMovies(movieName);\n    \n  }, [movies, movieName]);\n  \n  return (\n    <main>\n      <div>\n        <form onSubmit={formSubmit}>\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"enter movie name \"\n            value={name}\n            onChange={handleChange}\n          />\n          <button type=\"submit\">Search</button>\n        </form>\n\n        <MoviesList movies={movies} />\n      </div>\n    </main>\n  );\n};\n\nexport default Movies;","export const BASE_URL = 'https://api.themoviedb.org/3/';\nexport const KEY_API = '2051bbcb32f4c1cda2d3fefb48b3cd3d';","import axios from 'axios';\nimport { BASE_URL, KEY_API } from './baseURL';\n\n//***The list of the most popular Movies for Today to create a collection on the Main Page\nexport async function getTrendingMovies() {\nconst { data } =\n    await axios.get(`${BASE_URL}trending/movie/day?api_key=${KEY_API}\n`);\n  return data;\n};\n\n// ***Searching for a movie by keyword on the movies page\nexport async function getMovies(searchValue) {\n  const { data } =\n    await axios.get(`${BASE_URL}/search/movie?api_key=${KEY_API}&page=1&query=${searchValue}\n`);\n  return data;\n};\n\n// ***The request of full movie information for a movie page\nexport async function getMovieDetails(id) {\n  const { data } = await axios.get(`${BASE_URL}/movie/${id}?api_key=${KEY_API}\n`);\n  return data;\n};\n\n// ***The request of cast information for a movie page\nexport async function getMovieCredits(id) {\n  const { data } =\n    await axios.get(`${BASE_URL}/movie/${id}/credits?api_key=${KEY_API}\n`);\n  return data;\n};\n\n// ***The request of reviews for a movie page\nexport async function getMovieReviews(id) {\n  const { data } =\n    await axios.get(`${BASE_URL}/movie/${id}/reviews?api_key=${KEY_API}\n`);\n  return data;\n};\n"],"names":["MovieName","styled","MovieLink","Link","MovieLi","MoviesList","movies","location","useLocation","map","movie","to","id","state","from","title","useState","setMovies","name","setName","useSearchParams","searchParams","setSearchParams","movieName","get","getMovies","then","data","results","catch","error","console","log","useEffect","onSubmit","event","preventDefault","target","value","trim","alert","type","placeholder","onChange","currentTarget","BASE_URL","KEY_API","getTrendingMovies","axios","searchValue"],"sourceRoot":""}